---
import { getCollection } from "astro:content";

import Layout from "@/layouts/Layout.astro";
import SocialLinks from "@/components/SocialLinks.astro";
import PostCardV2 from "@/components/PostCardV2.astro";
import Link from "@/components/shared/Link.astro";
import convertAsteriskToStrongTag from "@/utils/convertAsteriskToStrongTag";

import presentation from "@/data/presentation";

const posts = await getCollection("posts");

const publishedPosts = posts.filter(post => post.data.isPublish);

const sortedPublishedPosts = publishedPosts.sort((first, second) => {
  return second.data.publishedAt.getTime() - first.data.publishedAt.getTime();
});

---

<Layout>
  <main class="flex flex-col gap-20">
    <article
      class="flex flex-col gap-8 md:flex-row-reverse md:justify-end md:gap-12"
    >
      {
        presentation.profile && (
          <img
            src={presentation.profile}
            class="w-1/4 self-center rounded-full"
          />
        )
      }

      <div class="flex flex-col gap-8">
        <div>

          <span class="text-base leading-8 text-slate-400">{presentation.salutation}</span>
          <h1 
            class="text-3xl md:text-5xl text-neutral-100 font-normal"
            set:html={presentation.title}
          />
        </div>

        <h2
          class="w-auto max-w-[75ch] leading-7 md:leading-8 text-lg md:text-xl text-slate-400"
          set:html={convertAsteriskToStrongTag(presentation.description)}
        />
      </div>
    </article>

    <article class="flex flex-col gap-16">
      <header class="flex w-full flex-row justify-between gap-2 items-baseline border-dashed border-y border-gray-800 py-4">
        <h3 class="font-semibold text-slate-500 uppercase">Latest posts</h3>
        <Link href="/posts" label="See all posts &rarr;" target="_self" />
      </header>
      {sortedPublishedPosts.length === 0 && <p>Soon, stay connected ðŸ‘€...</p>}

      <section class="flex flex-col gap-12 md:flex-row md:flex-wrap">
        {
          sortedPublishedPosts.length !== 0 &&
          sortedPublishedPosts
              .slice(0, 5)
              .map((post) => (
                <PostCardV2
                  publishedAt={post.data.publishedAt}
                  title={post.data.title}
                  description={post.data.description}
                  slug={post.slug}
                />
              ))
        }
      </section>
    </article>

    <article class="flex flex-col gap-8">
      <header class="flex w-full flex-row justify-between gap-2">
        <h3 class="text-lg text-neutral-100">Get in touch</h3>
      </header>
      <p>
        Email me at <Link
          href={`mailto:${presentation.mail}`}
          label={presentation.mail}
        /> or follow me via my social links.
      </p>

      <SocialLinks />
    </article>
  </main>
</Layout>
